<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NI_SimpleTextReport_DotNet</name>
    </assembly>
    <members>
        <member name="T:SimpleTextReport.Reporter">
            <summary>The Reporter class handles many aspects of generating,
            formatting, and saving the Simple Text Report.</summary>
        </member>
        <member name="M:SimpleTextReport.Reporter.ProcessResultList(NationalInstruments.TestStand.Interop.API.ReportSection,NationalInstruments.TestStand.Interop.API.PropertyObject,SimpleTextReport.NI_SimpleTextReport_DotNetOptions@,SimpleTextReport.NI_SimpleTextReport_DotNetRuntimeVariables@,System.String,System.String,System.Int32)">
            <summary>ProcessResultList() is the main method for generating
            the report body.  It takes a ResultList, generates the report
            rows for it, and appends them to the report.
            
            ProcessResultList() is recursive.  If a sequence call is
            encountered, ProcessResultList() will invoke itself on the
            ResultList for that sequence call.</summary>
            <param name="reportSection">The ReportSection to which the
            new data will be appended.</param>
            <param name="resultList">The ResultList containing results to
            be added to the report.</param>
            <param name="options">The standard options associated with
            the report plug-in.</param>
            <param name="runtimeVariables">Runtime variables associated
            with the report plug-in.</param>
            <param name="sequence">The name of the sequence with which
            resultList is associated.</param>
            <param name="sequenceFile">The name of the sequence file
            containing sequence.</param>
            <param name="threadId">The id of the thread sequence ran
            on.</param>
        </member>
        <member name="M:SimpleTextReport.Reporter.ProcessResultListOtf(NationalInstruments.TestStand.Interop.API.ReportSection,NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32[],System.String[],SimpleTextReport.NI_SimpleTextReport_DotNetOptions@,SimpleTextReport.NI_SimpleTextReport_DotNetRuntimeVariables@,System.String,System.String,System.Int32)">
            <summary>ProcessResultListOtf() is the entry point for processing
            OTF results.  It is very similar to
            <see cref="M:SimpleTextReport.Reporter.ProcessResultList(NationalInstruments.TestStand.Interop.API.ReportSection,NationalInstruments.TestStand.Interop.API.PropertyObject,SimpleTextReport.NI_SimpleTextReport_DotNetOptions@,SimpleTextReport.NI_SimpleTextReport_DotNetRuntimeVariables@,System.String,System.String,System.Int32)">ProcessResultList()</see>,
            but handles the additional requirements involved with OTF.
            
            ProcessResultListOtf() is only ever invoked from the "Model
            Plugin - OnTheFly Step Results" callback in the
            NI_SimpleTextReport_DotNet.seq sequence file.</summary>
            <param name="reportSection">The ReportSection to which the
            new data will be appended.</param>
            <param name="resultList">The ResultList containing results to
            be added to the report.</param>
            <param name="parentIds">The step ids of the parent steps for
            the ResultList.  See model plug-in documentation for "Model
            Plugin - OnTheFly Step Results" for more information.</param>
            <param name="callbackNames">The names of the callbacks associated
            with the results in resultList. See model plug-in documentation
            for "Model Plugin - OnTheFly Step Results" for more information.
            </param>
            <param name="options">The standard options associated with
            the report plug-in.</param>
            <param name="runtimeVariables">Runtime variables associated
            with the report plug-in.</param>
            <param name="sequence">The name of the sequence with which
            resultList is associated.</param>
            <param name="sequenceFile">The name of the sequence file
            containing sequence.</param>
            <param name="threadId">The id of the thread sequence ran
            on.</param>
        </member>
        <member name="M:SimpleTextReport.Reporter.ProcessOneResult(NationalInstruments.TestStand.Interop.API.ReportSection,NationalInstruments.TestStand.Interop.API.PropertyObject,SimpleTextReport.NI_SimpleTextReport_DotNetOptions@,SimpleTextReport.NI_SimpleTextReport_DotNetRuntimeVariables@,System.String,System.String,System.Int32,System.Boolean)">
            <summary>ProcessOneResult() is a helper method for 
            <see cref="M:SimpleTextReport.Reporter.ProcessResultList(NationalInstruments.TestStand.Interop.API.ReportSection,NationalInstruments.TestStand.Interop.API.PropertyObject,SimpleTextReport.NI_SimpleTextReport_DotNetOptions@,SimpleTextReport.NI_SimpleTextReport_DotNetRuntimeVariables@,System.String,System.String,System.Int32)">ProcessResultList()</see>,
            and
            <see cref="M:SimpleTextReport.Reporter.ProcessResultListOtf(NationalInstruments.TestStand.Interop.API.ReportSection,NationalInstruments.TestStand.Interop.API.PropertyObject,System.Int32[],System.String[],SimpleTextReport.NI_SimpleTextReport_DotNetOptions@,SimpleTextReport.NI_SimpleTextReport_DotNetRuntimeVariables@,System.String,System.String,System.Int32)">ProcessResultListOtf()</see>
            that performs processing on an individual Result.  This is where
            the details of which columns are reported, how they are
            formatted, etc. are handled.</summary>
            <param name="reportSection">The ReportSection to which the
            new data will be appended.</param>
            <param name="result">The result to be added to the report.</param>
            <param name="options">The standard options associated with
            the report plug-in.</param>
            <param name="runtimeVariables">Runtime variables associated
            with the report plug-in.</param>
            <param name="sequence">The name of the sequence with which
            resultList is associated.</param>
            <param name="sequenceFile">The name of the sequence file
            containing sequence.</param>
            <param name="threadId">The id of the thread sequence ran
            on.</param>
            <param name="processSubsequenceCalls">Pass true if ResultLists
            attached to TS.SequenceCall objects should be processed.  Pass
            false to ignore them.</param>
        </member>
        <member name="M:SimpleTextReport.Reporter.AppendReportRow(NationalInstruments.TestStand.Interop.API.ReportSection,System.String[],SimpleTextReport.NI_SimpleTextReport_DotNetOptions@)">
            <summary>AppendReportRow() appends a single row to the passed
            reportSection.  Its primary use is to create the column headings
            and rows for the body of the report, but the Simple Text Report
            example also uses it to write the header and footer.</summary>
            <param name="reportSection">The ReportSection to which the
            new data will be appended.</param>
            <param name="data">Array of column entries to be written for the
            current row.</param>
            <param name="options">The standard options associated with
            the report.</param>
        </member>
        <member name="M:SimpleTextReport.Reporter.TsToLocalTime(System.Double,System.Double)">
            <summary>Create a DateTime object representing the given
            TestStand time.  TestStand generally represents time using
            UTC time with the Engine's start time as the epoch (or
            reference time).  This method performs the necessary
            conversions to produce a DateTime struct in local time.
            </summary>
            <seealso cref="M:SimpleTextReport.Reporter.Ts2UtcTime(System.Double,System.Double)">Ts2UtcTime()</seealso>
            <param name="tsTime">Time in seconds since the engine
            started.</param>
            <param name="engineStartTimeUtc">Engine start time, UTC seconds
            since January 1, 1970.</param>
            <returns>A DateTime object representing tsTime in local
            time.</returns>
        </member>
        <member name="F:SimpleTextReport.Reporter.EPOCH_1970_TICKS">
            <summary>TestStand uses midnight on January 1, 1970 as the epoch.
            The .Net DateTime struct uses midnight January 1, 0001.
            <see cref="M:SimpleTextReport.Reporter.Ts2UtcTime(System.Double,System.Double)">Ts2UtcTime()</see>
            uses EPOCH_1970_TICKS to perform this conversion.</summary>
        </member>
        <member name="M:SimpleTextReport.Reporter.Ts2UtcTime(System.Double,System.Double)">
            <summary>Create a DateTime object representing the given
            TestStand time in UTC time.  TestStand generally represents
            time using UTC time with the Engine's start time as the epoch
            (or reference time).  This method performs the necessary
            conversions to produce a DateTime struct in UTC time.
            </summary>
            <seealso cref="M:SimpleTextReport.Reporter.TsToLocalTime(System.Double,System.Double)">TsToLocalTime()</seealso>
            <param name="tsTime">Time in seconds since the engine
            started.</param>
            <param name="engineStartTimeUtc">Engine start time, UTC seconds
            since January 1, 1970.</param>
            <returns>A DateTime object representing tsTime in UTC.</returns>
        </member>
        <member name="F:SimpleTextReport.Reporter.NEED_CSV_ESCAPE">
            <summary>NEED_CSV_ESCAPE is used by
            <see cref="M:SimpleTextReport.Reporter.CsvEscape(System.String,System.Boolean)">CsvEscape()</see>
            to find characters that need quoting and escaping.  Per RFC
            4180, commas, quotes, carriage returns, and line feeds must
            be quoted and escaped.</summary>
        </member>
        <member name="M:SimpleTextReport.Reporter.CsvEscape(System.String,System.Boolean)">
            <summary>Quote and escape a CSV field per RFC 4180.</summary>
            <param name="field">The field to escape.  A null field is
            treated as an empty string.</param>
            <param name="always">Pass true to quote all fields, even if
            not required by RFC 4180 because none of the special characters
            are present.  Pass false to leave fields containing no special
            characters unchanged.</param>
            <returns>The field quoted and escaped, or the original field if
            no escaping is required.</returns>
        </member>
        <member name="M:SimpleTextReport.Reporter.WhitespacePadding(System.Int32,System.String)">
            <summary>Calculate the number of spaces that must be appended
            after the previous column to make that column have the desired
            minimum field width.</summary>
            <param name="desiredFieldWidth">The desired field width.</param>
            <param name="previousField">The previous field.  If previousField
            is null, it is treated as an empty string.</param>
            <returns>The number of spaces such that when appended to a comma
            following the previous field, the next field will begin
            desiredFieldWidth characters after the start of the previous
            field.  If the required padding would be zero or negative
            amount, 1 is returned.</returns>
        </member>
        <member name="M:SimpleTextReport.Reporter.replaceInvalidFileNameChars(System.String)">
            <summary>Returns the argument with invalid file name characters
            replaced with underscores.</summary>
            <param name="fileName">The file name which may contain invalid
            characters.</param>
            <returns>The file name with invalid characters replaced by the
            underscore, '_', character.</returns>
        </member>
        <member name="M:SimpleTextReport.Reporter.GenerateUniqueReportPath(System.String,System.String,System.String,System.Int32)">
            <summary>Generate a unique file name with reportBaseName and
            ending with dotExtension in the given reportDirectory.  If the
            file requested already exists, attempt to make it unique by
            successively appending "_2", "_3", etc. to the reportBaseName.
            Give up after maxTries.</summary>
            <param name="reportDirectory">The directory to put the report
            in.</param>
            <param name="reportBaseName">The base name for the report
            file.</param>
            <param name="dotExtension">he extension to use, including the
            '.' character.</param>
            <param name="maxTries">The number of attempts to make a file
            name before giving up.  If a number greater than 1024 is
            passed, only 1024 attempts will be made.</param>
            <returns>A string containing the unique path.</returns>
        </member>
        <member name="M:SimpleTextReport.Utils.RString(NationalInstruments.TestStand.Interop.API.Engine,System.String,System.String)">
            <summary>A simple wrapper method for GetResourceString().  Most
            likely you will not need this because you will probably not need
            any TestStand resource strings.  It is used here to support
            localization.</summary>
            <param name="engine">An instance of the TestStand engine.</param>
            <param name="category">The category in the resource .ini
            file.</param>
            <param name="symbol">The string to replace, defined in the
            resource .ini file.</param>
            <returns>The requested resource string if found, or symbol if the
            resource was not found.</returns>
        </member>
        <member name="T:SimpleTextReport.StandardOptionsDialog">
            <summary>StandardOptionsDialog is the dialog box spawned when the
            user presses the options button in the Report Options dialog
            box.</summary>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.Display(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.Engine)">
            <summary>NI_SimpleTextReport_DotNet.seq calls Display() from
            the "Model Plugin - Configure Standard Options" callback to
            create and display an instance of the Options dialog
            box.</summary>
            <param name="simpleTextReportPlugin">A PropertyObject of
            type NI_ModelPlugin.  It must have the appropriate specialization
            for the Simple Text Report plug-in.</param>
            <param name="engine">A TestStand Engine instance.  The calling
            sequence should pass RunState.Engine.</param>
            <returns>true if changes were made and should be applied, false
            otherwise.</returns>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.#ctor(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.Engine)">
            <summary>Constructor.</summary>
            <seealso cref="M:SimpleTextReport.StandardOptionsDialog.Display(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.Engine)">Display()</seealso>
            <param name="simpleTextReportPlugin">A PropertyObject of
            type NI_ModelPlugin.  It must have the appropriate specialization
            for the Simple Text Report plug-in.</param>
            <param name="engine">A TestStand Engine instance.</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.updateCtrlFromConfig">
            <summary>Update all widget data from mConfig.  This is a helper
            method for the constructor.</summary>
            <seealso cref="M:SimpleTextReport.StandardOptionsDialog.updateConfigFromCtrl">updateConfigFromCtrl()</seealso>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.updateConfigFromCtrl">
            <summary>Update mConfig based on the state of the Form.
            Currently, this method is called only from the OK
            button handler.  If you add an "Apply" button, you would
            call it from that handler as well.</summary>
            <seealso cref="M:SimpleTextReport.StandardOptionsDialog.updateCtrlFromConfig">updateCtrlFromConfig()</seealso>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.RunDialog">
            <summary>Execute the Simple Text Report Options dialog.  The
            dialog is modal.
            <see cref="M:SimpleTextReport.StandardOptionsDialog.Display(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.API.Engine)">Display()</see>
            invokes this method.</summary>
            <returns>true if changes were made and should be applied; false
            otherwise.</returns>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.mCtrl_directoryTextBox_TextChanged(System.Object,System.EventArgs)">
            <param name="sender">ignored</param>
            <param name="e">ignored</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.mCtrl_otfCheckbox_CheckedChanged(System.Object,System.EventArgs)">
            <param name="sender">ignored</param>
            <param name="e">ignored</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.mCtrl_okButton_Click(System.Object,System.EventArgs)">
            <summary>Apply changes and close the dialog.</summary>
            <param name="sender">ignored</param>
            <param name="e">ignored</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.mCtrl_cancelButton_Click(System.Object,System.EventArgs)">
            <summary>Quit the dialog without applying changes.</summary>
            <param name="sender">ignored</param>
            <param name="e">ignored</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.mCtrl_helpButton_Click(System.Object,System.EventArgs)">
            <summary>Display help for this dialog.</summary>
            <param name="sender">ignored</param>
            <param name="e">ignored</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.mCtrl_browseButton_Click(System.Object,System.EventArgs)">
            <summary>Display the File Browse dialog allowing the user to
            browse to the desired directory.</summary>
            <param name="sender">ignored</param>
            <param name="e">ignored</param>
        </member>
        <member name="F:SimpleTextReport.StandardOptionsDialog.mConfig">
            <summary>mConfig is a reference to the PropertyObject representing
            the model plug-in's configuration.  After using it to initialize
            the user interface, it is not used again until/unless the user
            presses the OK button, which stores the updated settings back
            to mConfig.
            </summary>
        </member>
        <member name="F:SimpleTextReport.StandardOptionsDialog.mEngine">
            <summary>An instance of the Engine.</summary>
        </member>
        <member name="F:SimpleTextReport.StandardOptionsDialog.mChanged">
            <summary>Indicates if the dialog box has been changed.  This does
            not mean the user has pressed the OK button.  It just means that
            if the user does press OK button, there have been changes which
            need to be stored back to the plug-in.</summary>
        </member>
        <member name="F:SimpleTextReport.StandardOptionsDialog.mApplyChanges">
            <summary>Indicates that changes were made and the OK button
            has been pressed.</summary>
            <seealso cref="M:SimpleTextReport.StandardOptionsDialog.RunDialog">RunDialog()</seealso>
        </member>
        <member name="F:SimpleTextReport.StandardOptionsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SimpleTextReport.StandardOptionsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
